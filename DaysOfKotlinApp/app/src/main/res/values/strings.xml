<resources>
    <string name="app_name">Days Of Kotlin</string>
    <string name="day">Day</string>
    <string name="thirteen_days_of">30 Days of</string>
    <string name="kotlin">KOTLIN</string>

    <string name="sobre_kotlin">Sobre o Kotlin</string>
    <string name="desc_kotlin">Kotlin √© uma linguagem de programa√ß√£o moderna que √© interoper√°vel com Java e pode ser usada para desenvolver uma ampla variedade de aplicativos, incluindo Android, servidor, desktop e aplicativos web.
        Kotlin foi desenvolvido pela JetBrains, uma empresa conhecida por suas ferramentas de desenvolvimento, como o IntelliJ IDEA, tendo como l√≠der do projeto, o Andrey Breslav que √© um dos principais arquitetos da linguagem. Kotlin foi anunciado pela JetBrains em julho de 2011 e a vers√£o 1.0 foi lan√ßada em 15 de fevereiro de 2016, e agora em junho de 2024, Jetbrains lan√ßou a vers√£o 2.0, com um compilador mais r√°pido e multiplataforma.
        Em maio de 2017, o Google anunciou que a linguagem pr√≠ncipal de aplicativos Android nativo deixaria de ser o Java para ser Kotlin.</string>

    <string name="ide">IDEs</string>
    <string name="desc_ide">
        <string name="principal">Primeiramente, vamos entender o que √© IDE. Integrated Development Environment (ambiente de desenvolvimento integrado) √© onde vamos escrever nossos c√≥digos para que ele nos ajude com a sintaxe, compila√ß√£o, entre outras coisas.
Para Kotlin, h√° algumas IDEs principais como:\n</string>
        <string name="first_ide"> - <b>IntelliJ</b>, desenvolvido pela JetBrains, se voc√™ lembra do dia 1, ela √© a criadora da linguagem Kotlin.\n</string>
        <string name="second_ide"> - <b>Visual Studio Code</b>, uma das IDEs mais famosas, muito utilizada por conta da sua versatilidade, customiza√ß√£o e simplicidade, criada pela Microsoft, √© uma boa op√ß√£o tamb√©m.\n</string>
        <string name="third_ide"> - <b>Android Studio</b>, para quem j√° pensa em utilizar o Kotlin para desenvolvimento de aplicativos Android, essa √© a op√ß√£o perfeita, j√° que √© a IDE oficial do Google para o desenvolvimento de aplicativos.\n</string>
        <string name="fourth_ide"> - <b>Kotlin Playground</b>, para voc√™ que quer apenas testar Kotlin ou n√£o tem espa√ßo em seu dispositivo, essa √© uma op√ß√£o √≥tima, j√° que √© uma IDE online, precisa apenas de um navegador e conex√£o com a internet.\n</string>
    </string>

    <string name="fun_main">Fun√ß√£o main()</string>
    <string name="desc_fun_main">
        <string name="tile">Vamos focar no que realmente importa, o C√ìDIGO!\n</string>
        <string name="principal">
            Para come√ßar, √© fundamental entender a fun√ß√£o main. No Kotlin,
            a fun√ß√£o main serve como o ponto de entrada do programa, √© como se fosse a faixa
            de largada dos corredores. √â nela que o compilador sabe onde deve iniciar a execu√ß√£o
            do c√≥digo. Sem a fun√ß√£o main, o compilador n√£o saberia por onde come√ßar, tornando a
            defini√ß√£o dessa fun√ß√£o crucial para qualquer aplica√ß√£o.
        </string>
        <string name="chamada">Observe a imagem acima com a sintaxe b√°sica da fun√ß√£o main em Kotlin.</string>
    </string>

    <string name="print">Imprimindo na tela</string>
    <string name="desc_print">
        <string name="principal">
            Hoje aprenderemos a escrever algo na tela, mas antes preciso te contar sobre a maldi√ß√£o do "Hello World". Que diz que, se a primeira coisa que voc√™ fizer com a tecnologia n√£o for uma sauda√ß√£o ao mundo, essa tecnologia n√£o ser√° dominada por voc√™. Se √© verdade, eu n√£o sei, mas eu n√£o arriscaria üòÖüòâ ent√£o, vamos resolver isso logo.
Na sua IDE escolhida, nas chaves {} da fun√ß√£o main criada anteriormente vamos escrever o comando print() ou println().\n</string>
        <string name="explain_print">A diferen√ßa entre os dois comandos √© que o print() imprime sua frase apenas, j√° o println(), imprime sua frase e pula uma linha, muito √∫til para formatar textos e facilitar a leitura.
Dentro dos parenteses, "()" do seu comando escolhido, vamos passar nossa frase entre aspas duplas, eu explicarei porque somente com aspas duplas nos pr√≥ximos dias, continue acompanhando. Na minha sauda√ß√£o, coloquei em portugu√™s e o comando ficou assim.\n</string>
        <string name="code"><b>println("Ol√°, Mundo!")\n</b></string>
        <string name="last">Nosso c√≥digo est√° pronto, procure na sua IDE um bot√£o que ir√° fazer o programa rodar, normalmente est√° no canto direito superior, pode ser uma seta para a direita ‚ñ∂Ô∏è ou um &quot;Run&quot;.\n</string>
        <string name="error">Caso seu c√≥digo tenha dado algum tipo de erro, verifique se o comando digitado n√£o foi com um P mai√∫sculo, certifique-se de que o c√≥digo est√° id√™ntico ao da imagem acima.</string>
    </string>

    <string name="val_var">Vari√°veis</string>
    <string name="desc_val_var">
        <string name="initial">Na aula passada, dissemos &quot;Ol√°&quot; ao Mundo, mas e se quisermos dizer &quot;Ol√°&quot; para diferentes pessoas, basta trocar no print e colocar o nome de quem quisermos, certo? Sim! Ir√° funcionar, mas nosso c√≥digo n√£o ficar√° din√¢mico, utilizaremos uma vari√°vel para resolver isso, vem comigo!\nUma vari√°vel √© um espa√ßo armazenado na mem√≥ria para guardarmos um dado, ficou complexo? Explicarei melhor.\n</string>
        <string name="principal">Voc√™ quer guardar um brinquedo para utilizar depois, ent√£o voc√™ resolve pegar uma caixa, mas voc√™ sabe que mais para frente ter√° mais brinquedos e voc√™ sabe que cada caixa s√≥ pode armazenar um brinquedo, ent√£o voc√™ como uma pessoa inteligente decide definir uma identifica√ß√£o na caixa, por exemplo, para o seu brinquedo preferido voc√™ coloca o nome de &quot;meuBrinquedoFavorito&quot; e dentro dessa caixa ter√° o seu brinquedo favorito, mas e se o brinquedo favorito mudar? Voc√™ ter√° que tirar o primeiro para colocar o novo brinquedo favorito. Vari√°vel √© o mesmo, s√≥ que no computador, temos locais de mem√≥ria (caixas) com uma identifica√ß√£o para armazenar um dado (brinquedo), ficou mais f√°cil de entender, n√©?
            No seu c√≥digo da aula anterior, modificaremos o print, antes dele criaremos uma val (vari√°vel imut√°vel) com o identificador chamado &quot;nome&quot;, ser√° com esse identificador que pegaremos o que tem dentro dessa vari√°vel e com o operador de atribui√ß√£o &quot;=&quot; passaremos o dado que ser√° armazenado por essa vari√°vel, eu coloquei o meu nome, mas voc√™ pode passar o seu.
            Para printar o nome, apagaremos o mundo do nosso print e colocaremos o nome da nossa vari√°vel. O meu √© &quot;nome&quot;, ficando:\n
        </string>
        <string name="print1">print(&quot;Ol√°, nome!&quot;)\nRode o c√≥digo e confira a sa√≠da.\n</string>
        <string name="explain">Percebe-se que a sa√≠da foi &quot;Ol√°, nome!&quot; e n√£o era esse o esperado, isso √© porque o nome foi passado como literal entre as aspas duplas, para resolver isso colocaremos um &quot;$&quot; antes do identificador nome, ficando:\n</string>
        <string name="print1">print(&quot;Ol√°, $nome!&quot;)\nRode o c√≥digo e confira a sa√≠da.\n</string>
        <string name="var">Colocaremos a sauda√ß√£o em uma vari√°vel tamb√©m, mas como quero que uma hora a sa√≠da seja &quot;Ol√°&quot; e depois &quot;Oi&quot;, tenho que definir como &quot;var&quot; ao inv√©s de val. Uma var (vari√°vel mut√°vel) permite que troquemos o conte√∫do posteriormente no c√≥digo, diferente da val (vari√°vel imut√°vel), verifique na imagem acima como ficou o final.\n</string>
        <string name="final">Dia longo, mas aprendemos bastante coisa, pratique isso e at√© amanh√£!</string>
    </string>

    <string name="data_type">Tipos de dados primitivos</string>
    <string name="data_type_desc">
        <string name="initial">Praticou muito a aula de ontem? Tenho certeza de que sim! Ent√£o, vou te mostrar hoje tipos diferentes que uma vari√°vel pode armazenar.\n</string>
        <string name="principal">Quando criamos uma val ou var, o compilador &quot;por baixo dos panos&quot; define um tipo de dado segundo o conte√∫do que passamos. Ontem criamos duas vari√°veis do tipo String, hoje vou te explicar todos os tipos primitivos do Kotlin.\n</string>
        <string name="data_types">
            üü£ String ‚Üí √â uma sequ√™ncia de caracteres, podendo ser letras, n√∫meros, s√≠mbolos, outros s√≠mbolos e at√© tudo junto, utilizada para armazenar mensagens, como endere√ßo, nomes e at√© n√∫meros de telefone. Para passar informa√ß√µes a uma vari√°vel do tipo String √© necess√°rio estar entre aspas duplas.\n
            üü£ Int ‚Üí O Int √© a defini√ß√£o de n√∫mero inteiro, todos aqueles n√∫meros que n√£o t√™m casa decimal, ou seja, v√≠rgulas de precis√£o. Podemos definir como Int vari√°veis para idade, ano ou quantidade de produtos, por exemplo. Voc√™ deve estar se perguntando, se String consegue armazenar n√∫meros tamb√©m, porque n√£o criamos tudo como String. A resposta √© simples, porque quando precisamos somar n√∫meros, a String n√£o dar√° o resultado esperado.\n
            üü£ Double ‚Üí Quando precisamos de precis√£o nos n√∫meros, o melhor tipo de dado √© o Double, que define casas decimais ap√≥s a v√≠rgula. Podemos criar vari√°veis do tipo Double, sal√°rio ou metragem, por exemplo. Assim como o Int ela tamb√©m faz opera√ß√µes matem√°ticas.\n
            üü£ Boolean ‚Üí Por fim, temos o tipo booleano que define se algo √© verdadeiro ou falso, no caso do Kotlin, se algo √© &quot;true&quot; ou &quot;false&quot;. Podemos definir uma vari√°vel do tipo Boolean para informa√ß√µes como trabalhaHomeOffice, notificacoesAtivada entre outras.\n
        </string>
        <string name="final_types">Verifique na imagem acima como definimos o tipo da vari√°vel e as maneiras de passar o conte√∫do da vari√°vel. Ap√≥s o identificador, passamos dois pontos &quot;:&quot; e em seguida o dado da vari√°vel. Caso queira que o compilador defina sozinho o tipo da vari√°vel, n√£o √© necess√°rio colocar.</string>
    </string>
    
    <string name="operators">Operadores aritm√©ticos</string>
    <string name="operators_desc">
        <string name="initial">Ontem citei sobre os tipos Int e Double fazerem opera√ß√µes matem√°ticas, hoje trabalharemos isso, opera√ß√µes aritm√©ticas. Mas fique tranquilo(a) que voc√™ n√£o precisa ser um mestre da matem√°tica para entender a aula de hoje.\n</string>
        <string name="principal">Na matem√°tica temos as opera√ß√µes b√°sicas como: soma(+), subtra√ß√£o(-), multiplica√ß√£o(*) e divis√£o(/), vamos trabalhar isso no Kotlin, para realizarmos uma opera√ß√£o utilizamos o s√≠mbolo da opera√ß√£o desejada entre dois n√∫meros, podendo ser o n√∫mero literal ou vari√°vel do tipo Int, ou Double, veja um exemplo:\n</string>
        <string name="code">N &quot;s√≠mbolo&quot; N\n</string>
        <string name="operators_examples">
            + ‚Üí Id√™ntico ao que estamos acostumados, para somar utilizamos o sinal de mais entre dois n√∫meros, 1 + 1, ou podemos utilizar duas vari√°veis do tipo Int, ou Double, por exemplo, duas vari√°veis criadas anteriormente como x recebendo 1 e y recebendo 2, x + y e at√© mesmo um n√∫mero e uma vari√°vel.\n
            - ‚Üí Da mesma forma, temos a subtra√ß√£o que utilizamos o sinal de menos entre dois n√∫meros, 2 - 2, ou como explicado anteriormente, podemos utilizar vari√°veis para realizar a opera√ß√£o.\n
            * ‚Üí Com o asterisco fazemos a opera√ß√£o de multiplica√ß√£o, essa opera√ß√£o seria a que mais muda, mas da para se acostumar tranquilamente.\n
            / -> Com a barra fazemos a divis√£o, vale lembrar que quando dividimos um valor por uma vari√°vel, temos que cuidar para que a vari√°vel n√£o seja 0.\n
            % -> Esse s√≠mbolo n√£o tira a porcentagem, ele √© o operador MOD. O resto da divis√£o, 10 % 2 o resultado √© 0, muito √∫til para checarmos se um n√∫mero √© √≠mpar ou par.
        </string>
        <string name="final">Essas foram as opera√ß√µes aritm√©ticas, n√£o se esque√ßam de testar o c√≥digo da imagem acima, espero que tenham entendido!</string>
    </string>
    
    <string name="comparison">Operadores de compara√ß√£o</string>
    <string name="comparison_desc">
        <string>Tranquila a aula de ontem, n√©? Ent√£o, a de hoje tamb√©m ser√°, fica tranquilo. Caso voc√™ tenha achado muito dif√≠cil, n√£o tem problema, uma dica √© esquecer o resultado da opera√ß√£o. Quem faz a conta √© o computador agora, voc√™ s√≥ precisa saber o que cada opera√ß√£o faz para conseguir realizar uma l√≥gica. Voc√™ consegue! Hoje trabalharemos com operadores de compara√ß√£o.\n</string>
        <string>Da mesma forma que os operadores aritm√©ticos, os de compara√ß√£o estar√° entre dois n√∫meros ou express√£o, express√£o podemos combinar de ser um operador aritm√©tico (1 + 1 ou 4/2, por exemplo).\n</string>
        <string>1+1 &quot;s√≠mbolo&quot; 5\n</string>
        <string>
            O retorno ser√° booleano true ou false\n
            &gt; ‚Üí &quot;maior&quot; - retorna se a primeira express√£o √© maior que a segunda\n
            &lt; ‚Üí &quot;menor&quot; - retorna se a primeira express√£o √© menor que a segunda\n
            &gt;= ‚Üí &quot;maior ou igual&quot; - retorna se a primeira express√£o √© maior ou igual que a segunda\n
            &lt;= ‚Üí &quot;menor ou igual&quot; - retorna se a primeira express√£o √© menor ou igual √† segunda.\n
            == ‚Üí &quot;igual&quot; - esse √© o igual a que estamos acostumados, se uma express√£o √© igual a outra, somente n√£o se confundir com o apenas um igual &quot;=&quot;, sendo o operador de atribui√ß√£o.
        </string>
    </string>

    <string name="logic">Operadores l√≥gicos</string>
    <string name="logic_desc">
        <string>Para finalizar os operadores, falaremos sobre operadores l√≥gicos, que compara duas express√µes (que podem ser compostas por operadores aritm√©ticos e de compara√ß√£o).\n</string>
        <string>Dica: A leitura de opera√ß√µes grandes, ser√° sempre nessa sequ√™ncia.\nAritm√©ticos ‚Üí Compara√ß√µes ‚Üí L√≥gicos\n</string>
        <string>
            O retorno dessa opera√ß√£o tamb√©m ser√° um valor booleano, true ou false.\n
            &amp;&amp; ‚Üí &quot;E&quot; - Operador que compara duas ou mais express√µes e apenas retora true quando todas as express√µes tem retorno true, por exemplo:\n
            1 &lt; 2 &amp;&amp; 1+2 &gt;= 3\n
            O retorno ser√° true.\n
            || ‚Üí &quot;Ou&quot; - Operador que compara duas ou mais express√µes e retorna true se pelo menos uma express√£o for verdadeira, por exemplo:\n
            1 == 3 || 3+5 &gt; 10 || true\n
            Nesse caso √© true porque bastou que aquele true no final torne a express√£o verdadeira.\n
            ! ‚Üí &quot;N√£o&quot; - Operador de nega√ß√£o, ele √© um operador para utilizar com os outros acima, ele deixa a express√£o ao oposto do seu valor booleano, por exemplo:\n
            !true retorna false\n
            !(3 &gt; 5) retorna true\n
            E da para voc√™ mesclar todos os operadores acima, vamos dar um exemplo real, para comprar um produto em uma loja, voc√™ precisa ser maior do que 15 anos e ter um documento oficial ou ter um documento de um respons√°vel com idade maior ou igual a 18 anos e n√£o ser pagamento por dinheiro.\n
            idade &gt; 15 &amp;&amp; documentoOficial || idadeDocumentoRespons√°vel &gt;= 18 &amp;&amp; !pagamentoEmDinheiro.\n
            Analise a imagem acima e tente rodar o c√≥digo e fazer seus testes! At√© amanh√£, que temos um conte√∫do bem legal para usar tudo isso que aprendemos nesses 3 dias.
        </string>
    </string>

    <string name="if_else">If/Else</string>
    <string name="if_else_desc">
        Para finalizar 10 dias de conte√∫do, aprenderemos a realizar condi√ß√µes no nosso c√≥digo. Imagine que desenvolvemos um aplicativo de filmes, mas nosso usu√°rio tem menos de 18 anos. Como faremos um filtro dos filmes que ele n√£o pode assistir ?\n
        Simples, para isso utilizaremos o if, que tem a fun√ß√£o de rodar uma parte do c√≥digo ou n√£o, dependendo se a condi√ß√£o for true ou false. Se a idade do usu√°rio for maior que 18, o usu√°rio pode assistir, em c√≥digo ficar√°:\n
        if(idade > 18) {\n
        \t println(&quot;Voc√™ pode assistir&quot;)\n
        }\n
        E se a idade for menor? O usu√°rio ficar√° sem uma resposta? Para resolver isso, colocamos o else, se a idade do usu√°rio for maior que 18, o usu√°rio pode assistir, sen√£o ele n√£o pode, em c√≥digo ficar√°:\n
        if(idade > 18) {\n
        \t println(&quot;Voc√™ pode assistir.&quot;)\n
        } else {\n
        \t println(&quot;Voc√™ n√£o pode assistir.&quot;)\n
        }\n
        (A frase dentro do print √© entre aspas duplas)\n
        Podemos fazer diversas condi√ß√µes no nosso c√≥digo, basta colocar o if e uma express√£o. Caso queira mais de uma express√£o na mesma condi√ß√£o, coloque mais um if na frente do else abra par√™nteses &quot;()&quot; e sua nova express√£o. Essa express√£o pode ser os operadores que retornam um valor booleano ou at√© uma vari√°vel do tipo booleano que tenha um valor.\n
        Analise a sintaxe do c√≥digo na imagem, rode o c√≥digo acima de exemplo e fa√ßa seus testes!
    </string>

    <string name="when">when</string>
    <string name="when_desc">
        Estou muito feliz que ainda esteja por aqui, na √∫ltima aula vimos if/else e fizemos alguns pequenos testes, mas e quando temos diversas op√ß√µes? Colocar if/else funciona? Sim, funciona sem problemas, mas o c√≥digo al√©m de ficar enorme, n√£o fica leg√≠vel e hoje aprenderemos o when para melhorar isso.\n
        A sintaxe do when √© bem tranquila, basta passar a palavra reservada when e um conjunto de par√™nteses (), dentro desses par√™nteses voc√™ passar√° a vari√°vel que deseja avaliar, fora dos par√™nteses abrimos e fechamos chaves, e dentro dele passaremos os casos poss√≠veis, temos algumas formas de passar os casos, explico por t√≥picos para voc√™.\n
        ‚û£ A primeira maneira √© a comum, passando apenas um caso, pode ser um n√∫mero, uma string, um valor booleano, dependendo do valor da sua vari√°vel.
        ‚û£ A segunda maneira √© apenas poss√≠vel para n√∫meros (Int/Double) que h√° uma sequ√™ncia, basta colocar o in e criar uma sequ√™ncia, por exemplo:\n
        in 1..10\n
        para a vari√°vel que tem o valor entre 1 e 10, receber√° esse caso.
        ‚û£ A terceira maneira √© passar casos por v√≠rgulas, muito √∫til para quando n√£o h√° uma sequ√™ncia de n√∫meros ou textos entre aspas duplas.\n
        ‚û£ A √∫ltima √© para qualquer caso que n√£o esteja incluso nos casos anteriores, com o else, sempre que houver uma vari√°vel que n√£o se encaixe em nenhum caso, ser√° nesse √∫ltimo caso que ela vai entrar.\n
        Ap√≥s passado o caso, passamos uma seta para a direita -&gt; (s√≠mbolo de menos e sinal de maior) e passaremos o que o c√≥digo deve fazer se cair nesse caso. No meu exemplo, passei um print, mas voc√™ pode atribuir valores a vari√°veis, realizar opera√ß√µes e at√© mesmo chamar fun√ß√µes que explicarei mais para frente.\n
        Outra maneira de usar o when √© colocar uma vari√°vel imut√°vel e faz√™-la ser atribu√≠da a um when, nos casos, ap√≥s a seta, voc√™ colocar√° um valor que pode ser atribu√≠do a essa vari√°vel, por exemplo:\n
        val idade = 18\n
        val faixaEtaria = when(idade) {\n
        \t in 0..3 -> &quot;Nen√©m&quot;\n
        \t in 4..12 -> &quot;Crian√ßa&quot;\n
        \t in 13..21 -> &quot;Adolescente&quot;\n
        \t else -> &quot;Adulto&quot;\n
        }\n
        Dessa forma, a vari√°vel faixa et√°ria poder√° receber qualquer valor conforme o valor da vari√°vel idade.\n
        Espero que tenha entendido, rode os c√≥digos passados e fa√ßa os seus testes, at√© amanh√£!
    </string>

    <string name="auto_incremento">Auto incremento</string>
    <string name="auto_incremento_desc">
        At√© o momento, utilizamos vari√°veis que recebem diversos valores, mas √†s vezes queremos apenas somar mais um na pr√≥pria vari√°vel, mas como saberemos qual ser√° o pr√≥ximo n√∫mero? Por isso, aprenderemos hoje a auto incrementar vari√°vel.\n
        √â poss√≠vel passar a pr√≥pria vari√°vel como um valor de atribui√ß√£o.\n
        var x = 1\n
        x = x\n
        o var x, que vale 1, receber√° o conte√∫do da vari√°vel x, que vale 1. Mas isso n√£o faz tanto sentido, mas √© muito √∫til para utilizarmos a pr√≥pria vari√°vel para fazermos uma contagem de passos, por exemplo.\n
        var x = 1\n
        x = x + 1\n
        Temos tr√™s maneiras de auto incrementar, os dois primeiros servem para qualquer opera√ß√£o matem√°tica, o √∫ltimo para acrescentar ou diminuir um. Analise na imagem acima e fa√ßa seus testes, isso ser√° muito importante para as pr√≥ximas aulas. At√© l√°!
    </string>

    <string name="laco_for">for</string>
    <string name="laco_for_desc">
        Iniciaremos em la√ßos de repeti√ß√£o, um assunto muito importante e que voc√™ utilizar√° bastante, come√ßaremos com o for.\n
        Um la√ßo de repeti√ß√£o √© quando fazemos nosso c√≥digo repetir uma quantidade desejada de vezes, por exemplo, se queremos realizar uma contagem de 0 at√© 10, podemos escrever 10 prints e passarmos uma vari√°vel que inicie em 0 e realize auto incremento at√© o 10, funciona! Mas temos um jeito de otimizar isso, imagina que seja uma contagem de 0 a 100...\n
        A sintaxe do for √© simples, passamos a palavra reservada for e abrimos par√™nteses, dentro dele definimos o nome de uma vari√°vel, ap√≥s o nome colocamos in e colocamos 2 n√∫meros entre dois pontos .., o primeiro indicando o n√∫mero inicial e o segundo at√© onde ele contar√°, abrimos e fechamos chaves e dentro dela colocamos tudo que desejamos que seja repetido a quantidade indicada.\n
        Na imagem acima, ficou uma contagem simples de 0 at√© 100, sendo que o segundo n√∫mero do la√ßo for eu defini como uma vari√°vel. Tente rodar o c√≥digo e fa√ßa alguns testes.
    </string>

    <string name="laco_while">while</string>
    <string name="laco_while_desc">
        Outro la√ßo de repeti√ß√£o √© o while, hoje estudaremos ele e em que momento devemos usar ele ao inv√©s do for.\n
        A sintaxe do while √© bem tranquila tamb√©m, passamos √† palavra reservada while, conjunto de par√™nteses e de chaves. Nos par√™nteses passaremos uma condi√ß√£o, como se fosse o if e, enquanto a condi√ß√£o for verdadeira, o loop permanecer√°.\n
        O mais comum de utilizarmos √© com n√∫meros, primeiro criamos uma vari√°vel anteriormente ao while, podemos definir ela como o valor inicial da contagem, na condi√ß√£o colocamos:\n
        (varialvel &lt; valorFinal)\n
        a condi√ß√£o depender√° de como ser√° seu c√≥digo, se for uma contagem crescente e quer que inclua o √∫ltimo n√∫mero, precisa ser menor ou igual, caso decrescente e n√£o inclua o n√∫mero final, maior apenas.\n
        AGORA UM DETALHE MUITO IMPORTANTE!\n
        Lembre-se sempre de fazer um incremento ou decremento na vari√°vel que est√° sendo comparada, sen√£o o la√ßo de repeti√ß√£o entrar√° em um ciclo infinito, j√° que a vari√°vel n√£o muda de valor e a condi√ß√£o ser√° sempre a mesma.\n
        Quando devemos optar no while?\n
        ‚Äî O while √© uma estrutura √≥tima para qualquer c√≥digo, mas podemos definir primordialmente ele quando precisamos de uma condi√ß√£o antes de entrar no la√ßo (sem precisar de um if) ou quando queremos que a contagem seja diferente de um a um, podendo ser de 2 a 2, 5 a 5.\n
        Criei o mesmo c√≥digo da aula do for em while, compare os dois e fa√ßa seus testes!\n
        Esse foi o while, espero que tenha gostado.
    </string>

    <string name="laco_repeat">repeat</string>
    <string name="laco_repeat_desc">
        E o √∫ltimo la√ßo que estudaremos √© o repeat.\n
        repeat √© um la√ßo de repeti√ß√£o bem simples, tanto que a aula de hoje ser√° bem rapidinha.\n
        Sua sintaxe √©, passando a palavra reservada repeat seguida por conjunto de par√™nteses e de chaves. No par√™ntese, colocaremos a quantidade que nosso c√≥digo ir√° repetir e nas chaves o que ser√° repetido, simples assim!\n
        Analise o c√≥digo acima e fa√ßa seus testes.
    </string>

    <string name="funcoes">funcoes - fun</string>
    <string name="funcoes_desc">
        Vamos supor que voc√™ precisa criar um aplicativo que tenha diversos bot√µes, mas todos fazem o mesmo, vamos escrever o c√≥digo da a√ß√£o do bot√£o diversas vezes? L√≥gico que n√£o tem um m√©todo para isso!\n
        Hoje falaremos sobre fun√ß√µes, fun√ß√µes servem para quando temos um c√≥digo que queremos rodar diversas vezes, mas n√£o em sequ√™ncia e sim quando for chamado, seja por realizar uma a√ß√£o, apertar um bot√£o. A fun√ß√£o armazena a quantidade de c√≥digo que voc√™ quiser e basta cham√°-la que ela realizar√° todo o c√≥digo. Como se fosse uma vari√°vel, mas com sequ√™ncia de c√≥digos.\n
        Para criar uma fun√ß√£o, passamos a palavra reservada fun fora da fun main, criamos o nome dessa fun√ß√£o, geralmente com um verbo, mostrarMenu ou criarCadastro, e novamente, seguido por um conjunto de par√™nteses e de chaves. Nos par√™nteses, colocaremos nada por enquanto, nas chaves colocaremos tudo que o nosso c√≥digo precisar√° rodar quando essa fun√ß√£o for chamada.\n
        Na fun√ß√£o main chamamos a fun√ßao que acabamos de criar, passamos o nome de refer√™ncia seguido pelos par√™nteses.\n
        Repare na fun√ß√£o que criei para mostrar um personagem de um jogo.
    </string>
    
    <string name="parameters_fun">Fun√ß√µes com par√¢metros</string>
    <string name="parameters_fun_desc">
        E se tivermos diversos personagens? Como podemos criar uma fun√ß√£o para mostrar a propriedade de cada um?\n
        Hoje aprenderemos a criar uma fun√ß√£o com par√¢metros, que seria uma fun√ß√£o para quando precisamos enviar as informa√ß√µes para a fun√ß√£o utilizar no c√≥digo, criaremos uma fun√ß√£o que mostrar√° as informa√ß√µes de um personagem flexivelmente.\n
        Na mesma fun√ß√£o da aula anterior, nos par√™nteses, passaremos os elementos de que precisamos no c√≥digo, primeiro o nome de refer√™ncia, logo em seguida dois pontos e o tipo que essa vari√°vel √©, repare na linha 6 do c√≥digo, essa ser√° uma vari√°vel tempor√°ria, que s√≥ ser√° utilizada na fun√ß√£o. No print da fun√ß√£o, tiramos tudo aquilo que √© est√°tico e colocaremos o nome da refer√™ncia que criamos, lembrando de colocar o $ antes da vari√°vel da fun√ß√£o.\n
        Na chamada da fun√ß√£o na main, temos que passar todos os par√¢metros na ordem que criamos ou passando o nome da vari√°vel que criamos na fun√ß√£o desejada e passamos o valor dela.\n
        Espero que entenda a aula de hoje, at√©!
    </string>

    <string name="return_fun">Fun√ß√µes com retorno</string>
    <string name="return_fun_desc">
        Outra maneira de utilizar as fun√ß√µes, s√£o as fun√ß√µes com retorno, fazendo a fun√ß√£o retornar um valor ap√≥s a sua chamada, ela pode ser com ou sem par√¢metros. Hoje vamos criar fun√ß√£o que retornar√° o nome ao contr√°rio.\n
        Fora da main, criamos uma fun√ß√£o chamada inverter, que ter√° como par√¢metro um nome do tipo String, ap√≥s os par√™nteses do par√¢metro, passamos dois pontos e o tipo que a fun√ß√£o retornar√°, no nosso caso, como √© um nome √© do tipo String, mas depende do prop√≥sito da sua fun√ß√£o./n
        Para retornarmos um valor, basta utilizarmos a palavra reservada return seguido pelo valor de retorno, √© poss√≠vel utilizar um if/else para que em cada situa√ß√£o retorne uma coisa, mas vale ressaltar que assim que colocamos os dois pontos e o valor de retorno precisamos ter na fun√ß√£o o return./n
        Na nossa fun√ß√£o inverter, apenas retornaremos o nome com um ponto reversed()./n
        O retorno podemos armazenar em uma vari√°vel para utilizarmos durante o c√≥digo ou podemos retornar no print, que ser√° impresso na tela o valor de retorno./n
        Teste o c√≥digo da imagem acima.
    </string>
    
    <string name="nullable_type">Vari√°veis nulas</string>
    <string name="nullable_type_desc">
        Finalizamos fun√ß√µes, espero que tenha praticado todos os tipos de fun√ß√µes. Hoje vamos falar sobre tipos de vari√°veis que podem ser nulas.\n
        Quando criamos vari√°veis, elas podem ter diversos valores conforme os seus respectivos tipos, mas e se criamos uma vari√°vel do tipo String para armazenar o nome do pet de uma pessoa, at√© aqui tudo perfeito, mas e se ela n√£o tiver pet? Para isso h√° uma maneira de guardar o tipo null(nulo) em uma vari√°vel.\n
        Quando tentamos adicionar o valor null a uma vari√°vel comum, ela nos retornar√° um erro, dizendo que a vari√°vel n√£o √© capaz de ser nula.\n
        Para resolvermos isso, basta colocarmos um ponto de interroga√ß√£o (?), ap√≥s o nosso tipo da vari√°vel, isso far√° que informamos ao compilador que a vari√°vel pode ser nula ou n√£o. Quando precisamos utilizar uma propriedade como a length (que retorna quantas letras nossa String tem), precisamos tamb√©m colocar um ponto de interroga√ß√£o ap√≥s a vari√°vel, para garantir que o c√≥digo n√£o quebre ao tentar contar o tamanho de nada.\n
        Bom por hoje foi s√≥, fica ligado que amanh√£ iniciaremos nossa programa√ß√£o orientada a objetos, fui!
    </string>
    
    <string name="classe_title">O que √© uma class?</string>
    <string name="classe_desc">
        Vamos hoje introduzir a programa√ß√£o orientada a objetos(POO), que seria um conceito de como desenvolver programa√ß√£o, a POO √© muito utilizada hoje em dia, diversas empresas abordam esse conceito como o principal e nada melhor do que come√ßar explicando o que √© uma classe, antes de ver c√≥digo.\n
        Classe, √© como se fosse um modelo que criamos conforme a regra de neg√≥cio para utilizarmos a qualquer momento no c√≥digo, vamos aos exemplos.\n
        Vamos desenvolver um aplicativo para animais. No nosso modelo(classe), temos que pensar o que um pet tem.\n
         - Pet tem nome;\n
         - Pet tem dono;\n
         - Pet tem um tipo (Cachorro, gato, papagaio...);\n
         - Pet tem idade;\n
         - Pet tem colora√ß√£o/n
        Se quisermos podemos ficar fazendo uma lista aqui o dia todo, ter√° bastante coisa que um pet tem. Mas precisamos aplicar o conceito da abstra√ß√£o, para um software que seja para um veterin√°rio todos esses exemplos s√£o v√°lidos, mas n√£o a colora√ß√£o, n√£o far√° diferen√ßa ter ou n√£o, assim como para um banho e tosa, n√£o far√° diferen√ßa a colora√ß√£o e a idade, mas para um centro de ado√ß√£o, √© mega v√°lido ter a colora√ß√£o. Para isso precisamos ver o que o sistema precisa./n
        Quando criado nossa classe, podemos criar diversos pets e utilizarmos durante o c√≥digo.\n
        Hoje foi uma aula mais te√≥rica, mas espero que tenha entendido e gostado, um beijo e um queijo.
    </string>

    <string name="class_kotlin">Class em Kotlin</string>
    <string name="class_kotlin_desc">
        A partir de hoje colocaremos tudo que vimos no dia anterior em pr√°tica, ser√° bem legal e mudar√° bastante a maneira que voc√™ faz c√≥digo, ent√£o fica ligado!\n
        Para criarmos uma classe em Kotlin, antes do main, colocamos a palavra reservada class e colocamos um nome Com a primeira letra em mai√∫sculo, √© uma boa pr√°tica, por exemplo, Pessoa e Pet. Ap√≥s o nome abrimos e fechamos chaves, que ser√° onde colocaremos nossos atributos e m√©todos. Que vou explicar mais para frente.\n
        Crie uma classe pessoa e certifique-se que est√° igual ao da imagem acima
        Por hoje foi s√≥ e at√© amanh√£!
    </string>

    <string name="atributos">Atributos</string>
    <string name="atributos_desc">
        Hoje falaremos sobre os atributos de uma classe.\n
        Todo modelo tem caracter√≠sticas, por exemplo, uma class Pessoa, ter√° como caracter√≠stica, o nome, a idade, o g√™nero e entre outras coisas que ser√° importante no nosso programa.\n
        Os atributos s√£o as caracter√≠sticas no nosso c√≥digo, utilizaremos elas durante o c√≥digo para caracterizar cada pessoa, mas como podemos cri√°-las?\n
        Criamos os atributos, da mesma maneira que criamos uma vari√°vel, mas na classe temos que deixar um valor padr√£o, caso a pessoa n√£o insira o valor, tenha um valor que ser√° preenchido, podemos colocar tamb√©m um atributo nulo, caso a pessoa n√£o tenha, ser√° null.\n
        Ent√£o colocamos, var ou val, dependendo se queremos que o valor do atributo seja mudado futuramente, em seguida o nome identificador, dois pontos e o tipo do atributo. Precisamos passar um = e um valor padr√£o, pode ser aspas duplas vazias para String, ou 0 para os Int.\n
        Observe o c√≥digo acima e fa√ßa o seu tamb√©m! Um abra√ßo.
    </string>

    <string name="getter_setter">Getter e Setter</string>
    <string name="getter_setter_desc">
        Quando inserimos um valor no atributo estamos utilizando a propriedade Set e quando pegamos o valor do atributo, para realizar um print na tela, por exemplo, utilizamos o Get. Hoje vamos aprender a personalizar a jeito que pegamos e atribu√≠mos valor do atributo.\n
        Come√ßando pelo get, o get √© uma fun√ß√£o que retorna o valor do atributo, para modificar isso abaixo do atributo, apertamos o tab do teclado para dar um espacinho e escrevemos get(), seguido por um sinal =, e ai que vem toda a estrutura que ele ir√° retornar, no atributo existe uma palavra reservada chamada field, que √© o valor que cont√©m no atributo, um get() normal retorna apenas o field, mas no nosso caso, faremos um get que retornar√° o nome com uma formata√ß√£o, colocaremos o R no final, ap√≥s o igual colocaremos entre aspas $field R.\n
        Abaixo do get, daremos mais um tab e colocamos a palavra reservada set, com par√™nteses, e dentro dele colocamos value, ser√° o valor que vamos passar para o atributo no c√≥digo, seguido por um conjunto de chaves, nela colocamos o que quisermos, if/else, when, for... hoje colocaremos o field = value.toUpperCase(), uma propriedade para deixar o valor que colocarmos mai√∫sculo. Lembrando que uma atributo do tipo val n√£o tem set(), certifique-se que est√° definido como var.\n
        Mais para frente veremos o resultado! At√©
    </string>

    <string name="metodos">M√©todos</string>
    <string name="metodos_desc">
        Al√©m de caracter√≠sticas, toda class tamb√©m consegue realizar coisas. Seguindo o mesmo exemplo da classe Pessoa, ela consegue falar, andar, rir. S√£o a√ß√µes que uma pessoa pode realizar, m√©todos s√£o como as a√ß√µes.\n
        Quando criamos uma classe, precisamos ou n√£o que o mesmo realize a√ß√µes, essas a√ß√µes s√£o chamadas de m√©todos, e ela pode realizar tudo que um c√≥digo realiza, print, opera√ß√µes, cria√ß√£o de vari√°vel, entre outras coisas.\n
        Criamos um m√©todo com uma fun√ß√£o, passando a palavra reservada fun, o nome da fun√ß√£o, seguido por conjunto de par√™nteses que poder√° ser passado par√¢metros, caso n√£o tenha, deixe em branco. Assim como um retorno da fun√ß√£o, s√≥ seguir a aula do dia 18. Dentro do m√©todo, poder√° colocar o que quiser, assim que for chamado, tudo que est√° dentro ser√° rodado.\n
        Crie um m√©todo chamado falar(), que dentro dos parenteses ter√° um print realizando uma sauda√ß√£o e apresentando seu nome. Caso sinta dificuldades, siga a imagem acima.\n
        Terminamos o b√°sico de crian√ß√£o de uma classe, amanh√£ instanciaremos na main, at√© amanh√£!
    </string>

    <string name="instancias">Instanciando uma class</string>
    <string name="instancias_desc">
        Criamos nossa classe, criamos atributos, agora vamos usar isso no c√≥digo, para isso precisamos instanciar.\n
        Instanciar √© basicamente criar o modelo que fizemos na classe. Para isso precisamos alocar a class em uma vari√°vel para conseguirmos usar durante o c√≥digo.\n
        A inst√¢ncia de uma classe √© simples, precisamos passar o nome da classe com o mai√∫sculo, seguido por um conjunto de parenteses, tudo isso precisa ser alocado em uma vari√°vel, com qualquer nome, para utilizarmos futuramente.\n
        Para utilizarmos um atributo em um print, colocamos entre aspas o cifr√£o $, que estamos acostumados, o nome que demos √† vari√°vel que atribuiu a classe, com um ponto e o nome do atributo ou m√©todo que precisamos.
    </string>

    <string name="construtors">Construtores</string>
    <string name="construtors_desc">
        Concorda comigo que toda pessoa tem um nome? No nosso modelo, precisamos instanciar a classe e s√≥ depois por op√ß√£o colocar o nome da pessoa que estamos criando, precisamos deixar como obriga√ß√£o preencher o nome, para isso vamos utilizar os construtores.\n
        Construtor √© um m√©todo rodado assim que a classe √© instanciada, hoje vamos criar um construtor que pede obrigatoriamente o nome da pessoa instanciada.\n
        Crie outro c√≥digo, em cima da fun√ß√£o main, crie uma classe Pessoa seguido por um conjunto de par√™nteses, dentro dos par√™nteses, colocaremos nosso atributo nome. Est√° pronto!\n
        Para instanciarmos essa classe agora, s√≥ mudar√° uma coisinha, temos que j√° passar o nome entre os par√™nteses da Pessoa.\n
        Compare seu c√≥digo com o da imagem acima, te vejo amanh√£!
    </string>

    <string name="herenca">Heren√ßa</string>
    <string name="herenca_desc">
        Um conceito fundamental de POO √© a heran√ßa, hoje vamos mostrar como √© poss√≠vel poupar muitas linhas de c√≥digo com apenas um conceito.\n
        Quando pensamos em um modelo para Gato e Cachorro, todo gato e cachorro come, bebe, anda... se formos criar uma classe para cada um ficar√° um c√≥digo enorme e repetitivo. Para isso criamos uma classe m√£e e colocamos o que os dois tem em comum, na hora de criar a classe Gato e Cachorro herdamos.\n
        Toda classe que ser√° herdada precisa ter um open na frente, para identificar que ela pode ser herdada. Para herdar basta colocar dois pontos antes do conjunto de chaves e o nome da classe que vai herdar.
        Observe o c√≥digo acima, copie e fa√ßa seus testes!
    </string>

    <string name="generics">Generics</string>
    <string name="generics_desc">
        Hoje criaremos uma classe para moldar uma quest√£o, quest√£o de prova. Toda quest√£o tem uma pergunta e uma resposta. Toda pergunta √© do tipo String, um texto, mas e a resposta, de qual tipo ela √©? A resposta pode ter v√°rios tipos, String, para quest√µes matem√°ticas, Inteiro ou Double, ou at√© Boolean, para verdadeiro ou falso. Para deixar o tipo de um atributo, utilizamos Generics.
        Generics nos permite definir o tipo do atributo na inst√¢ncia da classe, nos trazendo flexibilidade.\n
        Para criar uma class generics, ap√≥s o nome da classe, colocamos um sinal de menor e de maior 	&lt; &gt;, dentro colocaremos um identificador do tipo vari√°vel, eu coloquei um T mai√∫sculo, em seguida colocaremos par√™nteses, para criar um construtor, onde ter√° a pergunta do tipo String, e a resposta do tipo T.\n
        Para instanciar √© o mesmo!\n
        Espero que tenha entendido at√© amanh√£ que estamos terminando!
    </string>

    <string name="enum_class">ENUM Class</string>
    <string name="enum_class_desc">
        Continuando com o c√≥digo de ontem. E se quisermos colocar uma dificuldade de cada quest√£o, qualificando entre, f√°cil, m√©dio e dif√≠cil. Agora imagine que para classificar uns escrevam com acento, outros sem, uns com letra mai√∫scula primeiro, outras, tudo min√∫sculo. Precisamos padronizar o valor, para isso criaremos uma ENUM class.\n
        ENUM class, √© quando padronizamos os valores que um atributo pode ter.\n
        A sintaxe da enum √© simples, passamos fora da main, as palavras reservadas enum class, com o nome identificador, seguido por um conjunto de chaves, dentro colocaremos os valores padr√µes separados por v√≠rgulas, recomenda-se deixar tudo em mai√∫sculo.\n
        Para instanciar uma enum, precisamos colocar o identificador com um ponto e o valor padronizado.
        Teste o c√≥digo e fa√ßa seus testes, se cuida!
    </string>

    <string name="listas">Listas</string>
    <string name="listas_desc">
        Para finalizar, vamos introduzir a listas e cole√ß√µes. Hoje vamos ver a mutableListOf. Que seria uma lista do tipo mut√°vel, igual o var.\n
        Uma lista √© um conjunto de elementos do mesmo tipo, pode ser String, Int ou qualquer outro tipo e at√© mesmo uma classe que criamos. Lista serve para organizar v√°rios elementos, muito √∫til para projetos mais complexos.\n
        Para criar uma lista mut√°vel criamos uma vari√°vel que receber√° uma mutableListOf() e entre os par√™nteses passamos os elementos iniciais. Uma lista tem propriedades como:\n
        add() ‚Üí Para adicionar um elemento no final da lista.\n
        remove() ‚Üí Remove o elemento que voc√™ passar nos par√™nteses.\n
        [0] ‚Üí Acessa os elementos por √≠ndices, √≠ndice √© um n√∫mero inteiro iniciado em 0.\n
        size ‚Üí Retorna a quantidade de elementos da lista.\n
        Para rodar por toda a lista, crie um for, onde o par√™ntese receber√° um nome identificador, que ser√° cada elemento da lista, seguido por um in e o nome da lista criada. Assim:\n
        for(item in itens) {\n
        &#009;println(item)\n
        }\n
        Ou como na imagem acima.\n
        Esses foram nossos 30 dias espero que tenha gostado de Kotlin assim como eu gosto, pratique muito e veja as possibilidades e se joga! At√© mais, \n
        Atenciosamente,\n
        Marlon Rodrigues.
    </string>

</resources>